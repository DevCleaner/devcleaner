name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  create-github-release:
    name: create-github-release
    runs-on: ubuntu-latest
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual run against a tag; overriding actual tag in the environment..."
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Validate version environment variable
        run: |
          echo "Version being built against is version ${{ env.VERSION }}"!

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: [create-github-release]
    runs-on: ${{ matrix.triple.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        triple:
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-gnu",
              artifact_prefix: "linux",
            }
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-musl",
              artifact_prefix: "linux-musl",
            }
          - {
              os: "macOS-latest",
              target: "x86_64-apple-darwin",
              artifact_prefix: "macos",
            }
          - {
              os: "windows-latest",
              target: "x86_64-pc-windows-msvc",
              artifact_prefix: "windows",
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get shared artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: artifacts

      - name: Set release version
        shell: bash
        run: |
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.triple.target }}

      - name: Installing needed macOS dependencies
        if: matrix.triple.os == 'macos-latest'
        run: brew install openssl@1.1

      - name: Installing needed Ubuntu dependencies
        if: matrix.triple.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev musl-tools

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --target=${{ matrix.triple.target }}
          toolchain: ${{ matrix.rust }}

      - name: Packaging final binary (Windows)
        if: matrix.triple.os == 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.triple.target }}/release
          BINARY_NAME=kdash.exe
          strip $BINARY_NAME
          RELEASE_NAME=kdash-${{ matrix.triple.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Packaging final binary (macOS and Linux)
        if: matrix.triple.os != 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.triple.target }}/release
          BINARY_NAME=kdash
          strip $BINARY_NAME
          RELEASE_NAME=kdash-${{ matrix.triple.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.triple.target }}/release/${{ env.RELEASE_NAME }}.tar.gz
            target/${{ matrix.triple.target }}/release/${{ env.RELEASE_NAME }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add SHA to artifacts
        run: |
          cp target/${{ matrix.triple.target }}/release/${{ env.RELEASE_NAME }}.sha256 artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  publish-package-formula:
    needs: [build-release]
    name: Update homebrew & choco formulas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get release artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: artifacts

      - name: Set release assets and version
        shell: bash
        run: |
          macos_sha="$(cat ./artifacts/nmkill-macos.sha256 | awk '{print $1}')"
          echo "MACOS_SHA=$macos_sha" >> $GITHUB_ENV
          linux_sha="$(cat ./artifacts/nmkill-linux-musl.sha256 | awk '{print $1}')"
          echo "LINUX_SHA=$linux_sha" >> $GITHUB_ENV          
          windows_sha="$(cat ./artifacts/nmkill-windows.sha256 | awk '{print $1}')"
          echo "WINDOWS_SHA=$windows_sha" >> $GITHUB_ENV
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release SHA macos: ${{ env.MACOS_SHA }}"
          echo "Release SHA linux: ${{ env.LINUX_SHA }}"
          echo "Release SHA windows: ${{ env.WINDOWS_SHA }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Execute Homebrew packaging script
        run: |
          python "./deployment/homebrew/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/homebrew/nmkill.rb.template" "./nmkill.rb" ${{ env.MACOS_SHA }} ${{ env.LINUX_SHA }}
          git config --global user.email "yunielacosta738@gmail.com"
          git config --global user.name "yacosta738"
          git clone https://yacosta738:${{ secrets.TAP_GITHUB_TOKEN }}@github.com/nmkill/homebrew-nmkill.git --branch=main brew
          rm brew/Formula/nmkill.rb
          cp nmkill.rb brew/Formula
          cd brew
          git add .
          git diff-index --quiet HEAD || git commit -am "Update formula for NMkill release ${{ env.RELEASE_VERSION }}"
          git push origin main

      - name: Execute chocolatey packaging script
        run: |
          python "./deployment/chocolatey/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/chocolatey/nmkill.nuspec.template" "./nmkill.nuspec" ${{ env.WINDOWS_SHA }}
          python "./deployment/chocolatey/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/chocolatey/chocolateyinstall.ps1.template" "./chocolateyinstall.ps1" ${{ env.WINDOWS_SHA }}
          git config --global user.email "yunielacosta738@gmail.com"
          git config --global user.name "yacosta738"
          git clone https://yacosta738:${{ secrets.CHOCO_GITHUB_TOKEN }}@github.com/nmkill/choco-nmkill --branch=main choco
          rm choco/nmkill.nuspec
          rm choco/tools/chocolateyinstall.ps1
          cp nmkill.nuspec choco/nmkill.nuspec
          cp chocolateyinstall.ps1 choco/tools/chocolateyinstall.ps1
          cd choco
          git add .
          git diff-index --quiet HEAD || git commit -am "Update package for nmkill release ${{ env.RELEASE_VERSION }}"
          git push origin main

      - name: Execute Scoop packaging script
        run: |
          python "./deployment/scoop/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/scoop/nmkill.json.template" "./nmkill.json" ${{ env.WINDOWS_SHA }}
          git config --global user.email "yunielacosta738@gmail.com"
          git config --global user.name "yacosta738"
          git clone https://yacosta738:${{ secrets.CHOCO_GITHUB_TOKEN }}@github.com/nmkill/scoop-nmkill --branch=main scoop
          rm scoop/nmkill.json
          cp nmkill.json scoop/nmkill.json
          cd scoop
          git add .
          git diff-index --quiet HEAD || git commit -am "Update package for nmkill release ${{ env.RELEASE_VERSION }}"
          git push origin main

  publish-cargo:
    name: Publishing to Cargo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty

#  publish-docker-image:
#    name: Publishing Docker image to Docker Hub
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#      - name: Push to Docker Hub
#        uses: docker/build-push-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          repository: yacosta738/nmkill
#          tag_with_ref: true
